#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D terrainBackground;
uniform sampler2D terrainColourR;
uniform sampler2D terrainColourG;
uniform sampler2D terrainColourB;
uniform sampler2D terrainBlendMap;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

    vec4 blendMapColour = texture(terrainBlendMap, pass_textureCoords);
    float backgroundAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoords = pass_textureCoords * 40.0;
    vec4 textureBackground = texture(terrainBackground, tiledCoords) * backgroundAmount;
    vec4 textureColourR = texture(terrainColourR, tiledCoords) * blendMapColour.r;
    vec4 textureColourG = texture(terrainColourG, tiledCoords) * blendMapColour.g;
    vec4 textureColourB = texture(terrainColourB, tiledCoords) * blendMapColour.b;
    vec4 textureColour = textureBackground + textureColourR + textureColourG + textureColourB;

    vec3 unitSurfaceNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float brightness = max(dot(unitSurfaceNormal, unitLightVector), 0.2);
    vec3 diffuse = brightness * lightColour;

    vec3 unitCameraVector = normalize(toCameraVector);
    vec3 lightDirection = - unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitSurfaceNormal);
    float specularFactor = max(dot(reflectedLightDirection, unitCameraVector), 0.0);
    float dampedFactor = pow(specularFactor, shineDamper);
    vec3 finalSpecular = dampedFactor * reflectivity * lightColour;

    out_Color = vec4(diffuse, 1) * textureColour + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);

}